[package]
name = "umm-malloc-sys"
version = "0.3.1"
authors = ["Ralph Hempel", "Matt Ickstadt <mattico8@gmail.com>"]
license = "MIT"
edition = "2018"
categories = ["embedded", "no-std", "external-ffi-bindings"]
keywords = ["allocator", "arm", "cortex-m", "malloc"]
description = "FFI bindings to the umm_malloc memory allocator."
repository = "https://github.com/mattico/umm-malloc-rs"
links = "umm_malloc"
readme = "README.md"
build = "build.rs"

exclude = [
    "umm_malloc/test",
    "umm_malloc/.github",
    "umm_malloc/ceedling.cmd",
    "umm_malloc/uncrustify.cfg",
    "umm_malloc/multitest.sh",
    "umm_malloc/project.yml",
    "umm_malloc/.git*",
]

[package.metadata.docs.rs]
targets = ["thumbv7em-none-eabihf"]

[build-dependencies]
cc = "1"

[features]
# See umm_malloc_cfg.h and umm_malloc_cfgport.h

# Add critical sections around allocator internals. You must supply the _umm_critical_entry() and _umm_critical_exit() 
# functions to implement them.
extern-critical-section = []

# Add critical sections around allocator internals, by disabling and re-enabling interrupts when necessary.
cortex-m-interrupt-critical-section = []

# Use the first available block for allocation, rather than search for a better fit.
first-fit = []

# Every umm_malloc function checks if the heap is initialized. If the heap is not initialized, it tries to initialize it
# with UMM_MALLOC_CFG_HEAP_ADDR and UMM_MALLOC_CFG_HEAP_SIZE.
init-if-uninitialized = []

# Every umm_malloc function checks if the heap is initialized. If the heap is not initialized, it loops forever.
hang-if-uninitialized = []

# Compile umm_malloc position indipendent.
enable-pie = []
